{"ast":null,"code":"// ... (other imports and styling remain unchanged)\nimport{useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[dataFromServer,setDataFromServer]=useState(null);const[newDataInput,setNewDataInput]=useState('');const[showInputForm,setShowInputForm]=useState(false);const[showPostInput,setShowPostInput]=useState(false);const handleButtonClick=async button=>{try{switch(button){case'button1':// Fetch data only when Button 1 is clicked\nconst response=await fetch('http://localhost:8080/api/employees');const data=await response.json();setDataFromServer(data);setShowInputForm(false);// Hide the input form\nbreak;case'button2':// Show input text box when Button 2 is clicked\nsetShowInputForm(true);setDataFromServer(null);// Clear previous data\nbreak;case'button3':// Implement logic for Button 3 if needed\nsetShowInputForm(true);setDataFromServer(null);// Clear previous data\nbreak;case'button4':setShowInputForm(true);setDataFromServer(null);// Implement logic for Button 4 if needed\nbreak;default:break;}}catch(error){console.error(\"Error handling \".concat(button,\" click:\"),error);}};const handleFormSubmit=async e=>{e.preventDefault();try{const formattedData={newData:newDataInput};console.log('newDataInput:',newDataInput);// Check the value here\n// Insert data when the form is submitted\nawait fetch('http://localhost:8080/api/employees',{method:'POST',headers:{'Content-Type':'application/json'},body:formattedData});// Optionally, you can clear the input after posting\nsetNewDataInput('');setShowInputForm(false);// Hide the input form after posting\n}catch(error){console.error('Error posting data:',error);}};const handlePutFormSubmit=async e=>{e.preventDefault();try{const formattedPutData={newData:newDataInput};console.log('newDataPutInput:',newDataInput);// Check the value here\n// Insert data when the form is submitted\nawait fetch('http://localhost:8080/api/employees',{method:'PUT',headers:{'Content-Type':'application/json'},body:formattedPutData});// Optionally, you can clear the input after posting\nsetNewDataInput('');setShowInputForm(false);// Hide the input form after posting\n}catch(error){console.error('Error Updating data:',error);}};const handleDeleteFormSubmit=async e=>{e.preventDefault();try{const formattedPutData={newData:newDataInput};console.log('newDataDelInput:',newDataInput);// Check the value here\n// Insert data when the form is submitted\nawait fetch('http://localhost:8080/api/employees/{employeeid}',{method:'Delete',headers:{'Content-Type':'application/json'},body:formattedPutData});// Optionally, you can clear the input after posting\nsetNewDataInput('');setShowInputForm(false);// Hide the input form after posting\n}catch(error){console.error('Error Deleting data:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"React CRUD Application\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleButtonClick('button1'),children:\"Button 1\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleButtonClick('button2'),children:\"Button 2\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleButtonClick('button3'),children:\"Button 3\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleButtonClick('button4'),children:\"Button 4\"})]}),dataFromServer&&/*#__PURE__*/_jsxs(\"div\",{className:\"DataDisplay\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Data from Server\"}),/*#__PURE__*/_jsx(\"pre\",{children:JSON.stringify(dataFromServer,null,2)})]}),showInputForm&&/*#__PURE__*/_jsxs(\"div\",{className:\"postDataForm\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Post Data\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleFormSubmit,children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"New Data:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newDataInput,onChange:e=>setNewDataInput(e.target.value)})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Post Data\"})]})]}),showInputForm&&/*#__PURE__*/_jsxs(\"div\",{className:\"DataFormPut\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Post Data\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handlePutFormSubmit,children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Update Data:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newDataInput,onChange:e=>setNewDataInput(e.target.value)})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Put Data\"})]})]}),showInputForm&&/*#__PURE__*/_jsxs(\"div\",{className:\"DataFormDel\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Delete Data\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleDeleteFormSubmit,children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Delete Data:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newDataInput,onChange:e=>setNewDataInput(e.target.value)})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Delete Data\"})]})]})]});}export default App;","map":{"version":3,"names":["useState","jsx","_jsx","jsxs","_jsxs","App","dataFromServer","setDataFromServer","newDataInput","setNewDataInput","showInputForm","setShowInputForm","showPostInput","setShowPostInput","handleButtonClick","button","response","fetch","data","json","error","console","concat","handleFormSubmit","e","preventDefault","formattedData","newData","log","method","headers","body","handlePutFormSubmit","formattedPutData","handleDeleteFormSubmit","className","children","onClick","JSON","stringify","onSubmit","type","value","onChange","target"],"sources":["C:/Users/sindh/Downloads/cruddemo/cruddemo/my-react-app/src/App.js"],"sourcesContent":["// ... (other imports and styling remain unchanged)\n\nimport {useState} from \"react\";\n\nfunction App() {\n    const [dataFromServer, setDataFromServer] = useState(null);\n    const [newDataInput, setNewDataInput] = useState('');\n    const [showInputForm, setShowInputForm] = useState(false);\n    const [showPostInput, setShowPostInput] = useState(false);\n\n    const handleButtonClick = async (button) => {\n        try {\n            switch (button) {\n                case 'button1':\n                    // Fetch data only when Button 1 is clicked\n                    const response = await fetch('http://localhost:8080/api/employees');\n                    const data = await response.json();\n                    setDataFromServer(data);\n                    setShowInputForm(false); // Hide the input form\n                    break;\n\n                case 'button2':\n                    // Show input text box when Button 2 is clicked\n                    setShowInputForm(true);\n                    setDataFromServer(null); // Clear previous data\n                    break;\n\n                case 'button3':\n                    // Implement logic for Button 3 if needed\n                    setShowInputForm(true);\n                    setDataFromServer(null); // Clear previous data\n                    break;\n\n                case 'button4':\n                    setShowInputForm(true);\n                    setDataFromServer(null);// Implement logic for Button 4 if needed\n                    break;\n\n                default:\n                    break;\n            }\n        } catch (error) {\n            console.error(`Error handling ${button} click:`, error);\n        }\n    };\n\n    const handleFormSubmit = async (e) => {\n        e.preventDefault();\n        try {\n\n            const formattedData = { newData: newDataInput };\n            console.log('newDataInput:', newDataInput); // Check the value here\n\n            // Insert data when the form is submitted\n            await fetch('http://localhost:8080/api/employees', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: formattedData,\n            });\n\n            // Optionally, you can clear the input after posting\n            setNewDataInput('');\n            setShowInputForm(false); // Hide the input form after posting\n        } catch (error) {\n            console.error('Error posting data:', error);\n        }\n    };\n\n    const handlePutFormSubmit = async (e) => {\n        e.preventDefault();\n        try {\n\n            const formattedPutData = { newData: newDataInput };\n            console.log('newDataPutInput:', newDataInput); // Check the value here\n\n            // Insert data when the form is submitted\n            await fetch('http://localhost:8080/api/employees', {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: formattedPutData,\n            });\n\n            // Optionally, you can clear the input after posting\n            setNewDataInput('');\n            setShowInputForm(false); // Hide the input form after posting\n        } catch (error) {\n            console.error('Error Updating data:', error);\n        }\n    };\n    const handleDeleteFormSubmit = async (e) => {\n        e.preventDefault();\n        try {\n\n            const formattedPutData = { newData: newDataInput };\n            console.log('newDataDelInput:', newDataInput); // Check the value here\n\n            // Insert data when the form is submitted\n            await fetch('http://localhost:8080/api/employees/{employeeid}', {\n                method: 'Delete',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: formattedPutData,\n            });\n\n            // Optionally, you can clear the input after posting\n            setNewDataInput('');\n            setShowInputForm(false); // Hide the input form after posting\n        } catch (error) {\n            console.error('Error Deleting data:', error);\n        }\n    };\n\n\n    return (\n        <div className=\"App\">\n            <h1>React CRUD Application</h1>\n            <div>\n                <button onClick={() => handleButtonClick('button1')}>Button 1</button>\n                <button onClick={() => handleButtonClick('button2')}>Button 2</button>\n                <button onClick={() => handleButtonClick('button3')}>Button 3</button>\n                <button onClick={() => handleButtonClick('button4')}>Button 4</button>\n            </div>\n\n            {dataFromServer && (\n                <div className=\"DataDisplay\">\n                    <h2>Data from Server</h2>\n                    <pre>{JSON.stringify(dataFromServer, null, 2)}</pre>\n                </div>\n            )}\n\n            {showInputForm && (\n                <div className=\"postDataForm\">\n                    <h2>Post Data</h2>\n                    <form onSubmit={handleFormSubmit}>\n                        <label>\n                            New Data:\n                            <input\n                                type=\"text\"\n                                value={newDataInput}\n                                onChange={(e) => setNewDataInput(e.target.value)}\n                            />\n                        </label>\n                        <button type=\"submit\">Post Data</button>\n                    </form>\n                </div>\n            )}\n            {showInputForm && (\n                <div className=\"DataFormPut\">\n                    <h2>Post Data</h2>\n                    <form onSubmit={handlePutFormSubmit}>\n                        <label>\n                            Update Data:\n                            <input\n                                type=\"text\"\n                                value={newDataInput}\n                                onChange={(e) => setNewDataInput(e.target.value)}\n                            />\n                        </label>\n                        <button type=\"submit\">Put Data</button>\n                    </form>\n                </div>\n            )}\n            {showInputForm && (\n                <div className=\"DataFormDel\">\n                    <h2>Delete Data</h2>\n                    <form onSubmit={handleDeleteFormSubmit}>\n                        <label>\n                            Delete Data:\n                            <input\n                                type=\"text\"\n                                value={newDataInput}\n                                onChange={(e) => setNewDataInput(e.target.value)}\n                            />\n                        </label>\n                        <button type=\"submit\">Delete Data</button>\n                    </form>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}