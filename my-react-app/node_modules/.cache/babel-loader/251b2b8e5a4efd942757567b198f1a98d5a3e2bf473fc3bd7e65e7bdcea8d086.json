{"ast":null,"code":"import'./App.css';import{useState}from'react';import DataDisplay from'./DataDisplay';// ... (other imports and styling remain unchanged)\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[dataFromServer,setDataFromServer]=useState(null);const[newDataInput,setNewDataInput]=useState('');const handleButtonClick=async button=>{try{switch(button){case'button1':// Fetch data only when Button 1 is clicked\nconst response=await fetch('http://localhost:8080/api/employees');const data=await response.json();setDataFromServer(data);break;case'button2':// Insert data only when Button 2 is clicked\nawait fetch('http://localhost:8080/api/employees',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({newData:newDataInput})});// Optionally, you can clear the input after posting\nsetNewDataInput('');break;// ... (other cases remain unchanged)\ndefault:break;}}catch(error){console.error(\"Error handling \".concat(button,\" click:\"),error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"React Four Buttons\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleButtonClick('button1'),children:\"Button 1\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleButtonClick('button2'),children:\"Button 2\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleButtonClick('button3'),children:\"Button 3\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleButtonClick('button4'),children:\"Button 4\"})]}),dataFromServer&&/*#__PURE__*/_jsx(DataDisplay,{data:dataFromServer}),/*#__PURE__*/_jsxs(\"div\",{className:\"postDataForm\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Post Data\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:e=>{e.preventDefault();handleButtonClick('button2');},children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"New Data:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newDataInput,onChange:e=>setNewDataInput(e.target.value)})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Post Data\"})]})]})]});}export default App;","map":{"version":3,"names":["useState","DataDisplay","jsx","_jsx","jsxs","_jsxs","App","dataFromServer","setDataFromServer","newDataInput","setNewDataInput","handleButtonClick","button","response","fetch","data","json","method","headers","body","JSON","stringify","newData","error","console","concat","className","children","onClick","onSubmit","e","preventDefault","type","value","onChange","target"],"sources":["C:/Users/sindh/Downloads/cruddemo/cruddemo/my-react-app/src/App.js"],"sourcesContent":["import './App.css';\nimport { useState } from 'react';\nimport DataDisplay from './DataDisplay';\n\n// ... (other imports and styling remain unchanged)\n\nfunction App() {\n    const [dataFromServer, setDataFromServer] = useState(null);\n    const [newDataInput, setNewDataInput] = useState('');\n\n    const handleButtonClick = async (button) => {\n        try {\n            switch (button) {\n                case 'button1':\n                    // Fetch data only when Button 1 is clicked\n                    const response = await fetch('http://localhost:8080/api/employees');\n                    const data = await response.json();\n                    setDataFromServer(data);\n                    break;\n\n                case 'button2':\n                    // Insert data only when Button 2 is clicked\n                    await fetch('http://localhost:8080/api/employees', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify({ newData: newDataInput }),\n                    });\n                    // Optionally, you can clear the input after posting\n                    setNewDataInput('');\n                    break;\n\n                // ... (other cases remain unchanged)\n\n                default:\n                    break;\n            }\n        } catch (error) {\n            console.error(`Error handling ${button} click:`, error);\n        }\n    };\n\n\n    return (\n        <div className=\"App\">\n            <h1>React Four Buttons</h1>\n            <div>\n                <button onClick={() => handleButtonClick('button1')}>Button 1</button>\n                <button onClick={() => handleButtonClick('button2')}>Button 2</button>\n                <button onClick={() => handleButtonClick('button3')}>Button 3</button>\n                <button onClick={() => handleButtonClick('button4')}>Button 4</button>\n            </div>\n\n            {dataFromServer && <DataDisplay data={dataFromServer} />}\n\n            {/* Add a form for posting data */}\n            <div className=\"postDataForm\">\n                <h2>Post Data</h2>\n                <form\n                    onSubmit={(e) => {\n                        e.preventDefault();\n                        handleButtonClick('button2');\n                    }}\n                >\n                    <label>\n                        New Data:\n                        <input\n                            type=\"text\"\n                            value={newDataInput}\n                            onChange={(e) => setNewDataInput(e.target.value)}\n                        />\n                    </label>\n                    <button type=\"submit\">Post Data</button>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}